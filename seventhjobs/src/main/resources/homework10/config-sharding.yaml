
schemaName: shopping

dataSourceCommon:
  username: root
  password: 111111
  connectionTimeoutMilliseconds: 30000
  idleTimeoutMilliseconds: 60000
  maxLifetimeMilliseconds: 1800000
  maxPoolSize: 50
  minPoolSize: 1
  maintenanceIntervalMilliseconds: 30000

dataSources:
  shopping_0:
    url: jdbc:mysql://127.0.0.1:3316/shopping?serverTimezone=UTC&useSSL=false
  shopping_1:
    url: jdbc:mysql://127.0.0.1:3326/shopping?serverTimezone=UTC&useSSL=false

rules:
- !SHARDING
  tables:
    t_order:
      actualDataNodes: shopping_${0..1}.t_order_${0..1}
      tableStrategy:
        standard:
          shardingColumn: f_order_id
          shardingAlgorithmName: t_order_inline
      keyGenerateStrategy:
        column: f_order_id
        keyGeneratorName: snowflake
#    t_order_item:
#      actualDataNodes: ds_${0..1}.t_order_item_${0..1}
#      tableStrategy:
#        standard:
#          shardingColumn: order_id
#          shardingAlgorithmName: t_order_item_inline
#      keyGenerateStrategy:
#        column: order_item_id
#        keyGeneratorName: snowflake
#  bindingTables:
#    - t_order,t_order_item
  defaultDatabaseStrategy:
    standard:
      shardingColumn: f_user_id
      shardingAlgorithmName: database_inline
  defaultTableStrategy:
    none:
  
  shardingAlgorithms:
    database_inline:
      type: INLINE
      props:
        algorithm-expression: shopping_${f_user_id % 2}
    t_order_inline:
      type: INLINE
      props:
        algorithm-expression: t_order_${f_order_id % 2}
#    t_order_item_inline:
#      type: INLINE
#      props:
#        algorithm-expression: t_order_item_${order_id % 2}
#  
  keyGenerators:
    snowflake:
      type: SNOWFLAKE
      props:
        worker-id: 123
